@page "/home"
<h3>Home</h3>
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@inject LocalStorage Storage


<!DOCTYPE html>
<html>
<head>
        <link href="/css/login.css" rel="stylesheet" type="text/css" />
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<div class="topnav">
<a><h1>Orders</h1></a>
</div>
<body>

 <br>
 <br>
 <br>
 <br>
 
@foreach (var specificData in UserData)
{
<div class="card">
<div class="container">
    <h3><u><b>@specificData.Name</b></u></h3>
    <h3>The Address is: @specificData.Address</h3>
    <h3>The Item is: @specificData.Item</h3>
    <h3>The Price is: @specificData.Price</h3>
    
    <h3>The Description is: @specificData.Description</h3>

</div>
</div>
}
<h6>If you dont see anything it means you have no orders</h6>
</body>
</html>








@code {
    @using System.Net.Http
    @using System.Text 
    @using System.Net.Http.Json
    @using System.Web
    @using Newtonsoft.Json.Linq
    @using Newtonsoft.Json
    @inject NavigationManager NavManager
    @inject NavigationManager UriHelper
    @inject IJSRuntime JsRuntime;
    private List<orderData> UserData = new();
    public string Username;
    public string Name;
    private async void ViewData  (){

            using var client = new HttpClient();
            var byteArray = Encoding.ASCII.GetBytes("Yassa Taiseer:yassa123");
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic",Convert.ToBase64String(byteArray));
            Username = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie",  "Username");

            Console.WriteLine(Username);
            Console.WriteLine("Username");

            var result = await client.GetStringAsync("https://dlvrapi.pythonanywhere.com/Orders/spec_order/"+Username);

            JArray data = JArray.Parse(result);
            foreach (dynamic obj in data){
                    UserData.Add(new orderData(){
                    Address = obj.Address,
                    Description  = obj.Description, 
                    Item = obj.Item, 
                    Latitude = obj.Latitude, 
                    Longitude = obj.Longitude, 
                    Name = obj.Name, 
                    Price = obj.Price
                });
            }
            StateHasChanged();
            
    }
    
        protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {

        //Name = await Storage.GetItemAsync("Username");
        StateHasChanged();
    }
}

    protected override async Task OnInitializedAsync()
    {
       //await OnAfterRenderAsync(true);

        ViewData();
       
    }



}
