@page "/"
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@inject LocalStorage Storage

<!DOCTYPE html>
<html>
<head>
        <link href="/css/login.css" rel="stylesheet" type="text/css" />
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<div class="topnav">
<a><h1>DlvrMe-Login</h1></a>
</div>
<body>

 <br>
 <br>
 <br>
 <br>
<div class="card">
  <div class="container">
    <label for="uname"><h3><b>Username</b></h3></label>
    <input type="text" placeholder="Enter Username"  @bind="Username"  required>

    <label for="psw"><h3><b>Password</b></h3></label>
    <input type="password" placeholder="Enter Password"  @bind="Password"   required>
    <div class="wrapper">
    <button class="btn"type="submit" @onclick="@Submit" >Login</button>
    </div>
    <br>
    <br>
    <a href="/signup">Not a user? Signup here</a>
  </div>
  </div>


</body>
</html>


@code {
    @using System.Net.Http
    @using System.Text 
    @using System.Net.Http.Json
    @using System.Web
    @using Newtonsoft.Json.Linq
    @using Newtonsoft.Json
    @inject NavigationManager NavManager
    @inject NavigationManager UriHelper
    @inject IJSRuntime JsRuntime;

    private string Username;
    private string Password;
    private async void  Submit()
    {
      if (!string.IsNullOrWhiteSpace(Username)&&!string.IsNullOrWhiteSpace(Password)){
        using var client = new HttpClient();
        var byteArray = Encoding.ASCII.GetBytes("Yassa Taiseer:yassa123");
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic",Convert.ToBase64String(byteArray));
        var result = await client.GetStringAsync("https://dlvrapi.pythonanywhere.com/Users/validate_user/"+Username+"/"+Password);
        dynamic data = JObject.Parse(result);
        //Console.WriteLine(data.Status);
        if (data.Status=="true"){
          //var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.WriteCookie", "name", Username, 1);
          //System.Web.HttpContext.Current.Response.Cookies["userName"].Value = Username;  
          //await JSRuntime.InvokeAsync<string>("CreateCookie", "Username", Username, 1);
          await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie",  "Username", Username, 1);

          //await Storage.SetItemAsync("Username",Username); 
          NavManager.NavigateTo("/home",true); 
        }
        else{
          await JsRuntime.InvokeVoidAsync("alert", "Invalid Credentials!");
        }

        }
        else{
          await JsRuntime.InvokeVoidAsync("alert", "Invalid Credentials!");
        }
    }
}