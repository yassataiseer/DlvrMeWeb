@page "/signup"

<!DOCTYPE html>
<html>
<head>
        <link href="/css/login.css" rel="stylesheet" type="text/css" />
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<div class="topnav">
<a><h1>DlvrMe-Signup</h1></a>
</div>
<body>

 <br>
 <br>
 <br>
 <br>
<div class="card">
  <div class="container">
    <img src="Latestlogo.png" alt="Logo is suppose to be here" class="center" >
    <br>

    <label for="uname"><h3><b>Username</b></h3></label>
    <input type="text" placeholder="Enter Username"  @bind="Username"  required>

    <label for="psw"><h3><b>Password</b></h3></label>
    <input type="password" placeholder="Enter Password"  @bind="Password"  required>
    <label for="psw"><h3><b>Repeat Password</b></h3></label>
    <input type="password" placeholder="Repeat Password" @bind="Rep_Password"  required>
        <div class="wrapper">
    <button class="btn"type="submit" @onclick="@Submit">Sign Up</button>
            </div>

    <a href="/">Already a user? Login!</a>
  </div>
</div>
    <br>
    <br>
</body>
</html>


@code {
    @using System.Net.Http
    @using System.Text 
    @using System.Net.Http.Json
    @using System.Web
    @using Newtonsoft.Json.Linq
    @using Newtonsoft.Json
    @inject NavigationManager NavManager
    @inject NavigationManager UriHelper
    @inject IJSRuntime JsRuntime;

    private string Username;
    private string Password;
    private string Rep_Password;
    private async void Submit(){
      if ((!string.IsNullOrWhiteSpace(Username)&&!string.IsNullOrWhiteSpace(Password)&&!string.IsNullOrWhiteSpace(Rep_Password))&&Rep_Password==Password){
        using var client = new HttpClient();
        var byteArray = Encoding.ASCII.GetBytes("Yassa Taiseer:yassa123");
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic",Convert.ToBase64String(byteArray));
        var result = await client.GetStringAsync("https://dlvrapi.pythonanywhere.com/Users/mk_user/"+Username+"/"+Password);
        dynamic data = JObject.Parse(result);
        Console.WriteLine(data.Status);
        if (data.Status=="true"){
        await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie",  "Username", Username, 1);

          NavManager.NavigateTo("/home",true); 
        } 
        else {
          await JsRuntime.InvokeVoidAsync("alert", "This Username Is Already Taken");
        }
      }
      else{
        //Console.WriteLine("MISTAKE");
          await JsRuntime.InvokeVoidAsync("alert", "Invalid Credentials!");
      }

    }
}